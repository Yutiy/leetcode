(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{585:function(v,_,t){"use strict";t.r(_);var a=t(12),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"简述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简述"}},[v._v("#")]),v._v(" 简述")]),v._v(" "),t("p",[v._v("算法是很重要的基础素质，而且也能保持你的思维状态。可能你在工作中，很多业务，很难用得上算法。但我十分赞同用"),t("code",[v._v("算法考量一个人的基本素质和能力，当然另一半应该是项目经验")]),v._v("。")]),v._v(" "),t("p",[v._v("现实点说，现在国内的公司越来越注重算法，比如头条。"),t("code",[v._v("算法决定了你思考复杂问题的能力，如果你不想仅仅做一个增删改查工程师")]),v._v("。")]),v._v(" "),t("h2",{attrs:{id:"第一阶段-攒数量-找感觉"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一阶段-攒数量-找感觉"}},[v._v("#")]),v._v(" 第一阶段 -> 攒数量，找感觉")]),v._v(" "),t("p",[v._v("在 30-50 道题以前，可以随机刷，找 easy 做，或者 medium 都可以。当然如果你基础好可以跳过这一阶段。")]),v._v(" "),t("h2",{attrs:{id:"第二阶段-针对性刷题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二阶段-针对性刷题"}},[v._v("#")]),v._v(" 第二阶段 -> 针对性刷题")]),v._v(" "),t("ul",[t("li",[v._v("找最常见的面试题目: 在 leetcode 网页上是有总结的，题量大概 100 左右，适合进阶")]),v._v(" "),t("li",[v._v("办个会员找公司题库刷 -> 针对性更强，除 google 外，大概 150 道左右")])]),v._v(" "),t("h2",{attrs:{id:"第三阶段-总结-扩充刷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三阶段-总结-扩充刷"}},[v._v("#")]),v._v(" 第三阶段 -> 总结+扩充刷")]),v._v(" "),t("ul",[t("li",[v._v("每一个刷过的题，除了太简单的，建议写写题解，刷的时候先把 md 文件建立起来")]),v._v(" "),t("li",[v._v("每一道题，你不看题解完全独立做出来，熟悉度是 1，独立两次就+1，不能就是小于 1。我这里是按照公司分类的")]),v._v(" "),t("li",[v._v("对每一类问题，比如二分，比如排序。对于基本思想，常见的用法和写法，建议有自己单独总结的一个文档")])]),v._v(" "),t("h2",{attrs:{id:"提醒"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提醒"}},[v._v("#")]),v._v(" 提醒")]),v._v(" "),t("p",[t("strong",[v._v("看再多，别人写的再好都不会是你的，可以参考，但自己想，自己写，强过一切。")])]),v._v(" "),t("h2",{attrs:{id:"殊途同归"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#殊途同归"}},[v._v("#")]),v._v(" 殊途同归")]),v._v(" "),t("p",[v._v("大家刷了很多题之后，就会发现来来回回，题目就那么几种类型，因此掌握已有题目类型是多么重要。那样 leetcode 出题的老师，很多也是在原有的题目基础上做了适当扩展（比如 two-sum，two-sum2，three-sum， four-sum 等等）或者改造（使得不那么一下子看出问题的本质，比如猴子吃香蕉问题）。")]),v._v(" "),t("p",[v._v("其中算法，主要是以下几种：")]),v._v(" "),t("ul",[t("li",[v._v("基础技巧：分治、二分、贪心")]),v._v(" "),t("li",[v._v("排序算法：快速排序、归并排序、计数排序")]),v._v(" "),t("li",[v._v("搜索算法：回溯、递归、深度优先遍历，广度优先遍历，二叉搜索树等")]),v._v(" "),t("li",[v._v("图论：最短路径、最小生成树")]),v._v(" "),t("li",[v._v("动态规划：背包问题、最长子序列")])]),v._v(" "),t("p",[v._v("数据结构，主要有如下几种：")]),v._v(" "),t("ul",[t("li",[v._v("数组与链表：单 / 双向链表")]),v._v(" "),t("li",[v._v("栈与队列")]),v._v(" "),t("li",[v._v("哈希表")]),v._v(" "),t("li",[v._v("堆：最大堆 ／ 最小堆")]),v._v(" "),t("li",[v._v("树与图：最近公共祖先、并查集")]),v._v(" "),t("li",[v._v("字符串：前缀树（字典树） ／ 后缀树")])])])}),[],!1,null,null,null);_.default=s.exports}}]);